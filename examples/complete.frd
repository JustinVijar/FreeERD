title "Complete Feature Demonstration"

// This file demonstrates all FreeERD features

// ==========================================
// DATA TYPE DEMONSTRATIONS
// ==========================================

table DataTypes {
  // Standard types
  id: int [pk, autoincrement],
  name: str,
  description: string,
  age: integer,
  active: bool,
  enabled: boolean,
  price: float,
  total: double,
  birth_date: date,
  login_time: time,
  created_at: datetime,
  
  // Binary types
  small_data: tinyblob [nullable],
  medium_data: blob [nullable],
  large_data: largeblob [nullable],
  
  // Custom types
  status: Status,
  color: RGB,
  shape: Polygon
}

// ==========================================
// ATTRIBUTE DEMONSTRATIONS
// ==========================================

table Attributes {
  // Primary key variations
  id: int [pk, autoincrement],
  
  // Unique constraints
  username: str [unique],
  email: str [unique],
  
  // Foreign keys
  user_id: int [fk],
  
  // Nullable fields
  middle_name: str [nullable],
  phone: str [nullable],
  
  // Default values - Reserved keywords
  created_at: datetime [default=NOW],
  is_active: bool [default=TRUE],
  is_deleted: bool [default=FALSE],
  deleted_at: datetime [default=NULL],
  
  // Default values - Literals
  status: str [default="pending"],
  priority: int [default=0],
  score: float [default=0]
}

// ==========================================
// MULTIPLE ATTRIBUTES
// ==========================================

table MultipleAttrs {
  id: int [pk, autoincrement],
  email: str [unique, nullable],
  verification_code: str [unique, nullable, default=NULL],
  created_at: datetime [default=NOW],
  status: str [default="active"]
}

// ==========================================
// RELATIONSHIP DEMONSTRATIONS
// ==========================================

// User and authentication system
table Users {
  id: int [pk, autoincrement],
  username: str [unique],
  email: str [unique],
  password_hash: str,
  created_at: datetime [default=NOW]
}

table Sessions {
  id: int [pk, autoincrement],
  user_id: int [fk],
  token: str [unique],
  expires_at: datetime
}

table Profiles {
  id: int [pk, autoincrement],
  user_id: int [fk],
  bio: str [nullable],
  avatar_url: str [nullable]
}

// Content system
table Posts {
  id: int [pk, autoincrement],
  author_id: int [fk],
  post_title: str,
  content: str,
  published_at: datetime [default=NOW],
  view_count: int [default=0]
}

table Comments {
  id: int [pk, autoincrement],
  post_id: int [fk],
  user_id: int [fk],
  content: str,
  created_at: datetime [default=NOW]
}

// Tagging system (many-to-many)
table Tags {
  id: int [pk, autoincrement],
  name: str [unique],
  slug: str [unique]
}

table PostTags {
  id: int [pk, autoincrement],
  post_id: int [fk],
  tag_id: int [fk]
}

// ==========================================
// RELATIONSHIP DEFINITIONS
// ==========================================

// One-to-many relationships (>)
Users.id > Sessions.user_id        // User has many sessions
Users.id > Posts.author_id         // User has many posts
Users.id > Comments.user_id        // User has many comments
Posts.id > Comments.post_id        // Post has many comments

// One-to-one relationship (-)
Users.id - Profiles.user_id        // User has one profile

// Many-to-many relationships (<>)
Posts.id <> PostTags.post_id       // Posts have many tags
Tags.id <> PostTags.tag_id         // Tags belong to many posts

// ==========================================
// ADDITIONAL TABLES FOR COMPLEX SCENARIOS
// ==========================================

table Categories {
  id: int [pk, autoincrement],
  parent_id: int [fk, nullable],    // Self-referential
  name: str [unique],
  description: str [nullable]
}

table Products {
  id: int [pk, autoincrement],
  category_id: int [fk],
  name: str [unique],
  sku: str [unique],
  price: float,
  stock: int [default=0],
  is_available: bool [default=TRUE]
}

table Orders {
  id: int [pk, autoincrement],
  user_id: int [fk],
  order_date: datetime [default=NOW],
  status: str [default="pending"],
  total_amount: float [default=0]
}

table OrderItems {
  id: int [pk, autoincrement],
  order_id: int [fk],
  product_id: int [fk],
  quantity: int [default=1],
  unit_price: float,
  subtotal: float
}

// More complex relationships
Categories.id > Products.category_id
Users.id > Orders.user_id
Orders.id > OrderItems.order_id
Products.id > OrderItems.product_id

// Self-referential relationship
Categories.id > Categories.parent_id
